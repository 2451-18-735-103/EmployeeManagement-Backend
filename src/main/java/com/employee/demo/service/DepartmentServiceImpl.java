package com.employee.demo.service;

import com.employee.demo.dto.DepartmentDto;
import com.employee.demo.dto.DepartmentResponse;
import com.employee.demo.exception.DepartmentAlreadyExistsException;
import com.employee.demo.exception.DepartmentNotFoundException;
import com.employee.demo.model.Department;
import com.employee.demo.model.Employee;
import com.employee.demo.repository.DepartmentRepository;
import com.employee.demo.repository.EmployeeRepository;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Service
public class DepartmentServiceImpl implements DepartmentService {


    private final DepartmentRepository departmentRepository;

    private final EmployeeRepository employeeRepository;

    private final ModelMapper mapper;

    // Construction Dependency Injection
    // @Autowired is optional if we have single constructor since Spring Framework 4.3
    // https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html
    public DepartmentServiceImpl(DepartmentRepository departmentRepository,
                                 EmployeeRepository employeeRepository, ModelMapper mapper) {
        this.departmentRepository = departmentRepository;
        this.employeeRepository = employeeRepository;
        this.mapper = mapper;
    }

    @Override
    public DepartmentResponse createDepartment(DepartmentDto dto) {
        log.info("Creating department with name:{}", dto.getName());
        if (departmentRepository.findByName(dto.getName()).isPresent()) {
            log.error("Department already exist with name" + dto.getName());
            throw new DepartmentAlreadyExistsException("Department already exists with name: " + dto.getName());
        } else {
            Department department = mapper.map(dto, Department.class);
            Department savedDepartment = departmentRepository.save(department);
            DepartmentResponse response = mapper.map(savedDepartment, DepartmentResponse.class);
            log.info("Department created successfully with id:" + response.getDepartmentId());
            return response;
        }
    }

    @Override
    public DepartmentResponse findDepartmentById(Long id) {
        log.info("Finding department by id {}", id);
        Optional<Department> optionalDepartment = departmentRepository.findById(id);
        if (optionalDepartment.isPresent()) {
            //since optionalDepartment is of type optional so we need to get that data in it and convert that to class
            DepartmentResponse response = mapper.map(optionalDepartment.get(), DepartmentResponse.class);
            log.info("Department found successfully with id: {}", id);
            return response;
        } else {
            log.error("Department was not found with given id:" + id);
            throw new DepartmentNotFoundException("Department Not Found With Id: " + id);
        }
    }

    @Override
    public DepartmentResponse updateDepartmentById(Long id, DepartmentDto dto) {
        log.info("updating department with id {}", id);
        Optional<Department> optionalDepartment = departmentRepository.findById(id);
        if (optionalDepartment.isPresent()) {
            Department department = optionalDepartment.get();
            //department.setId(id);(since department is autogenerated we cant change it
            department.setName(dto.getName());
            Department updatedDepartment = departmentRepository.save(department);
            DepartmentResponse response = mapper.map(updatedDepartment, DepartmentResponse.class);
            log.info("Departement is successfully updated with id {}", id);
            return response;
        } else {
            log.error("Department not found to update with id {}", id);
            throw new DepartmentNotFoundException("Department Not Found With Id: " + id);
        }
    }

    @Override
    public DepartmentResponse deleteDepartmentById(Long id) {
        log.info("Deleting department with id {}", id);
        Optional<Department> optionalDepartment = departmentRepository.findById(id);
        if (optionalDepartment.isPresent()) {
            Department department = optionalDepartment.get();

            // Fetch all employees associated with this department
            List<Employee> employees = employeeRepository.findByDepartmentDepartmentId(id);
            //Set the department field to null for these employees
            for (Employee employee : employees) {
                employee.setDepartment(null);
                employeeRepository.save(employee);
            }
            //delete the department
            departmentRepository.delete(department);
            //converting department to department response and returning it
            log.info("Deleted successfully with id {}", id);
            return mapper.map(department, DepartmentResponse.class);
        } else {
            log.error("Department not found for deleting with id {}", id);
            throw new DepartmentNotFoundException("Department not found with given id" + id);
        }

    }

    //first from repository we will find all department this gives list
    //then we are converting to stream then the mapper function is applied to each department in stram to convert to department response
    //collects the result to list
    @Override
    public List<DepartmentResponse> findAllDepartments() {
        log.info("Fetching all departments");
        return departmentRepository.findAll().stream()
                .map(department -> mapper.map(department, DepartmentResponse.class))
                .collect(Collectors.toList());
    }

}
